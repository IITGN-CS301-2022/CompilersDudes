from dataclasses import dataclass
from fractions import Fraction
from typing import Union, Mapping
from typing import List

@dataclass
class NumLiteral:
    value: Fraction
    def __init__(self, *args):
        self.value = Fraction(*args)

@dataclass
class BoolLiteral:
    value: bool


@dataclass
class If_else:
    e1: 'AST'
    e2: 'AST'
    e3: 'AST' 

@dataclass
class BinOp:
    operator: str
    left: 'AST'
    right: 'AST'

@dataclass
class Variable:
    name: str

@dataclass
class Let:
    var: 'AST'
    e1: 'AST'
    e2: 'AST'


@dataclass
class Seq:
    body: List['AST']

@dataclass
class LetMut:
    var: 'AST'
    e1: 'AST'
    e2: 'AST'

@dataclass
class Put:
    var: 'AST'
    e1: 'AST'

@dataclass
class Get:
    var: 'AST'

@dataclass
class Print:
    e1: 'AST'

AST = NumLiteral | BinOp | Variable | Let | If_else | LetMut | Put | Get |Seq

Value = Fraction | bool

class InvalidProgram(Exception):
    pass

def eval(program: AST, environment: Mapping[str, Value] = None) -> Value:
    if environment is None:
        environment = {}
    match program:
        case NumLiteral(value):
            return value
        case BoolLiteral(value):
            return value
        case If_else(e1,e2,e3):
            v1=eval(e1,environment)
            if v1==True:
                return eval(e2,environment)
            else:
                return eval(e3,environment)
        case Variable(name):
            if name in environment:
                return environment[name]
            raise InvalidProgram()
        case Put(Variable(name),e1): 
            environment[name]=eval(e1,environment)
            return environment[name]
        case Get(Variable(name)):
            return environment[name]
        case Let(Variable(name), e1, e2):
            v1 = eval(e1, environment)
            return eval(e2, environment | { name: v1 })
        case LetMut(Variable(name),e1, e2):
            v1 = eval(e1, environment)
            return eval(e2, environment | { name: v1 })
        case Seq(body):
            v1=None
            for item in body:
                v1=eval(item,environment)
            return v1    
        case BinOp("+", left, right):
            return eval(left, environment) + eval(right, environment)
        case BinOp("-", left, right):
            return eval(left, environment) - eval(right, environment)
        case BinOp("*", left, right):
            return eval(left, environment) * eval(right, environment)
        case BinOp("/", left, right):
            return eval(left, environment) / eval(right, environment)
        case BinOp(">",left,right):
            return eval(left,environment) > eval(right, environment)
        case BinOp("<", left,right):
            return eval(left,environment) < eval(right, environment)
        case BinOp("==", left,right):
            return eval(left,environment) == eval(right, environment)

        case Print(e1):
            print(eval(e1,environment))
    raise InvalidProgram()

def test_eval():
    e1 = NumLiteral(2)
    e2 = NumLiteral(7)
    e3 = NumLiteral(9)
    e4 = NumLiteral(5)
    e5 = BinOp("+", e2, e3)
    e6 = BinOp("/", e5, e4)
    e7 = BinOp("*", e1, e6)
    assert eval(e7) == Fraction(32, 5)


def test_If_else_eval():
    e1=NumLiteral(10)
    e2=NumLiteral(5)
    e3=NumLiteral(6)
    e4=NumLiteral(6)
    e5=BinOp("*",e2,e1)
    e6=BinOp("*",e3,e4)
    e7=BinOp(">",e5,e6)
    e10=If_else(e7,e5,e6)
    assert eval(e10) == 50

def test_let_eval():
    a  = Variable("a")
    e1 = NumLiteral(5)
    e2 = BinOp("+", a, a)
    e  = Let(a, e1, e2)
    assert eval(e) == 10
    e  = Let(a, e1, Let(a, e2, e2))
    assert eval(e) == 20
    e  = Let(a, e1, BinOp("+", a, Let(a, e2, e2)))
    assert eval(e) == 25
    e  = Let(a, e1, BinOp("+", Let(a, e2, e2), a))
    assert eval(e) == 25
    e3 = NumLiteral(6)
    e  = BinOp("+", Let(a, e1, e2), Let(a, e3, e2))
    assert eval(e) == 22


def test_letmut_eg1():
    a=Variable("a")
    e1=NumLiteral(5)
    e2=LetMut(a,e1,Put(a,BinOp("+",Get(a),NumLiteral(6))))
    assert eval(e2)==11


def test_letmut_eg2():
    a=Variable("a")
    e1=NumLiteral(5)
    b=Variable("b")
    e2=NumLiteral(4)
    e3=Put(a,BinOp("+",Get(a),Get(b)))
    e4=Put(b,BinOp("+",Get(a),Get(b)))
    e5=LetMut(b,e2,Seq([e3,e4]))
    e6=LetMut(a,e1,Seq([e5,Get(a)]))
    assert eval(e6)==9

def test_print():
    a=Variable("a")
    e1=NumLiteral(5)
    e2=LetMut(a,e1,Put(a,BinOp("+",Get(a),NumLiteral(6))))
    e3=Print(e2)
    assert eval(e3)==11

print(test_eval())
print(test_If_else_eval())
print(test_let_eval())
print(test_letmut_eg1())
print(test_letmut_eg2())
